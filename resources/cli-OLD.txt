# CONSTANTS
STREAM_FORMATS = list(
    ("secure_hls", "secure_pls", "secure_shoutcast", "hls", "pls", "shoutcast")
)
URL_PATTERN = r"^(?:https?://)?(?:\w{3}\.)?iheart.com/live/(?:[a-z0-9]+-)*[0-9]{4}/$"

EPILOG_STRING = "Recognized stream formats in order of priority:\n  " + \
    "\n  ".join(STREAM_FORMATS)

def main():
    # CMD-line parsing
    parser = argparse.ArgumentParser(
        description="Automagically retrieve internet radio stream urls from an iHeart Radio web address",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=EPILOG_STRING
    )
    # main_group = parser.add_mutually_exclusive_group()
    parser.add_argument("url", nargs='?',
                        help="The iHeart Radio url to retrieve stream info for")
    parser.add_argument(
        "-f", "--format", help="Overrides the best-guess stream format. See below for recognized stream formats")
    parser.add_argument(
        "-v",
        "--verbose",
        help="Displays additional information about received streams",
        action="store_true",
    )
    parser.add_argument(
        "-s",
        "--silent",
        help="Will exit silently rather than throw errors if encountered",
        action="store_true",
    )
    parser.add_argument(
        "-i",
        "--interactive",
        help="Prompts for url input rather than erroring if url is not supplied through stdin",
        action="store_true",
    )
    args = parser.parse_args()

    # Provide interactive input if needed
    if args.url and not args.interactive:
        url = args.url
        # Double check just in case
        if not match(URL_PATTERN, url):
            if (args.silent):
                sys.exit(0)
            else:
                print(PATTERN_FAIL_ERROR_TEXT)
                sys.exit(0)
    elif args.interactive:
        valid_input = False
        while not valid_input:
            url = input("Enter a valid iHeart Radio url: ")
            valid_input = match(URL_PATTERN, url)
            if (not valid_input):
                print(PATTERN_FAIL_ERROR_TEXT + "\n")
    else:
        if (args.silent):
            sys.exit(0)
        else:
            print(PATTERN_FAIL_ERROR_TEXT)
            sys.exit(0)

    # Make and stir the soup
    with get(url) as page:
        # Make sure it actually got the requested page
        try:
            page.raise_for_status()
        except HTTPError:
            if (args.silent):
                sys.exit(page.status_code)
            else:
                # If this fails, it's not user error
                raise HTTPError(REQUEST_FAIL_ERROR_TEXT)
        soup = BeautifulSoup(page.content, "html.parser")
        station_name = soup.title.getText().split("|")[0].strip()
        embed = soup.find(id="initialState").getText()
        stations_dict = loads(embed)["live"]["stations"]
        # Next line works because only one entry in dict is ever provided
        _, station_info = next(iter(stations_dict.items()))
        _, consistency_test = next(iter(stations_dict.items()))
        if (station_info != consistency_test):
            raise ValueError(MALFORMED_JSON_ERROR_TEXT)
        streams = station_info["streams"]
        # Figure out format selection
        if args.format:
            if args.format in STREAM_FORMATS:
                best_stream = args.format
            else:
                if (args.silent):
                    sys.exit(0)
                else:
                    print(STREAM_FORMAT_ERROR_TEXT)
                    sys.exit(0)
        else:
            best_stream = STREAM_FORMATS[0]
            for stream_type in STREAM_FORMATS:
                if stream_type + "_stream" in streams.keys():
                    best_stream = stream_type
                    break
        stream_url = streams[best_stream + "_stream"]
        if args.verbose:
            station_description = station_info["description"]
            if (station_info["band"] == "FM"):
                station_band = "MHz"
            elif (station_info["band"] == "AM"):
                station_band = "kHz"
            else:
                if (args.silent):
                    sys.exit(0)
                else:
                    # Shouldn't fail except in edge cases which need to be raised
                    raise ValueError(RADIO_BAND_ERROR_TEXT)

            station_freq = station_info["freq"]
            station_region = station_info["countries"]
            print("\n{}\n{}\n{}\n{} {}, {}".format(station_name, station_description, station_freq, station_band, station_region, stream_url))
        else:
            sys.stdout.write(stream_url + "\n")

if __name__ == "__main__":
    main()